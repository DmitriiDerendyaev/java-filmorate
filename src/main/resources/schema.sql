-- create user film_admin superuser;
-- alter user film_admin password 'postgres';
-- create database filmorate with owner film_admin;
-- Создание БД и суперпользовтеля-владельца БД

-- Для friendship
DROP TABLE IF EXISTS friendship;

-- Для likes
DROP TABLE IF EXISTS likes;

-- Для film_genre
DROP TABLE IF EXISTS film_genre;

-- Для users
DROP TABLE IF EXISTS users;

-- Для films
DROP TABLE IF EXISTS films;

-- Для genres
DROP TABLE IF EXISTS genres;

-- Для mpa
DROP TABLE IF EXISTS mpa;

CREATE TABLE IF NOT EXISTS mpa
(
    mpa_id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    rating varchar(10) NOT NULL
); -- Создание таблицы для работы с рейтингом

CREATE TABLE IF NOT EXISTS genres
(
    genre_id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name varchar(100) NOT NULL
); -- Создание таблицы для работы с жанрами фильмов TODO: создать скрипт для заполнения

CREATE TABLE IF NOT EXISTS films
(
    film_id int GENERATED  BY DEFAULT AS IDENTITY PRIMARY KEY,
    name varchar(255) NOT NULL,
    description varchar(255),
    release_date date NOT NULL,
    duration int NOT NULL CHECK ( duration > 0), -- TODO: возможно, пересмотеть вариант использования INT
    mpa_id int REFERENCES mpa (mpa_id) ON DELETE CASCADE
); -- Создание таблицы для работы с фильмами

CREATE TABLE IF NOT EXISTS film_genre
(
    film_id int NOT NULL,
    genre_id int NOT NULL,
    PRIMARY KEY (film_id, genre_id),
    FOREIGN KEY (film_id) REFERENCES films(film_id) ON DELETE CASCADE,
    FOREIGN KEY (genre_id) REFERENCES genres(genre_id) ON DELETE CASCADE
); -- Создание таблицы связей между фильмами и жанрами

CREATE TABLE IF NOT EXISTS users
(
    user_id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email varchar(200) NOT NULL,
    login varchar(255) NOT NULL,
    user_name varchar(255),
    birthday date CHECK ( birthday < current_date )
); -- Создание таблицы для работы с пользователем

CREATE TABLE IF NOT EXISTS likes
(
    film_id int NOT NULL,
    user_id int NOT NULL,
    PRIMARY KEY (film_id, user_id),
    FOREIGN KEY (film_id) REFERENCES films(film_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
); -- Создание таблицы для связи лайков

CREATE TABLE IF NOT EXISTS friendship
(
    user_id int NOT NULL,
    friend_id int NOT NULL,
    PRIMARY KEY (user_id, friend_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    FOREIGN KEY (friend_id) REFERENCES users(user_id) ON DELETE CASCADE,
    status boolean
); -- Создание таблицы связей между пользователями, являющимися друзьями
